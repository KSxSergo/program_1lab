name: 'C++ CI'

on:
  push:
    branches:
      - main
      - feature/github_actions

jobs:

  for_windows:
    runs-on: windows-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install vcpkg and dependencies
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg install boost-test

      - name: Configure with CMake
        run: |
          cmake -B build -DPATCH_VERSION=${{ github.run_number }} -DCMAKE_TOOLCHAIN_FILE="vcpkg/scripts/buildsystems/vcpkg.cmake"

      - name: Build
        run: cmake --build build --config Release

      - name: Tests
        run: ctest --test-dir build -C Release

      - name: Create ZIP archive for Windows
        run: |
          Compress-Archive -Path build/Release/helloworld_cli.exe -DestinationPath helloworld-1.0.${{ github.run_number }}-Windows.zip -Force

        
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-package
          path: helloworld-1.0.${{ github.run_number }}-Windows.zip

  for_linux:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
        with: 
          submodulse: true
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install libboost-test-dev -y

      - name: Configure CMake
        run: cmake . -DPATCH_VERSION=${{ github.run_number }}

      - name: Building
        run: cmake --build .

      - name: Test
        run: cmake --build . --target test

      - name: Make pkg
        run: cmake --build . --target package

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-package
          path: helloworld-1.0.${{ github.run_number }}-Linux.deb

  create-release:
    runs-on: ubuntu-latest
    needs: [for_windows, for_linux]
    permissions: write-all
    steps:
      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-package

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-package

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./helloworld-1.0.${{ github.run_number }}-Linux.deb
          asset_name: helloworld-1.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          assets_path: helloworld-1.0.${{ github.run_number }}-Windows.zip
          asset_name: helloworld-1.0.${{ github.run_number }}-Windows.zip
          asset_content_type: application/zip